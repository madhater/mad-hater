name: Build
on:
  push:
    branches:
      - angular-20
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
      
    - name: npm install
      run: npm ci

    - name: Get Release Version
      id: release-version
      uses: actions/github-script@v7
      with: 
        result-encoding: string
        script: |
          const getIncrementType = () => {
            const message = context.event.head_commit.message;
            if (message.startsWith('MAJOR')) {
              return 'MAJOR';
            } else if (message.startsWith('MINOR')) {
              return 'MINOR';
            }
            return 'PATCH';
          }
          const getReleaseVersion = () => {
            const incrementType = getIncrementType();
            try {
              const latestRelease = github.rest.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const [major, minor, patch] = version.replace('v', '').split('.').map(Number);
              if (incrementType === 'MAJOR') {
                major++;
              } else if (incrementType === 'MINOR') {
                minor++;
              } else {
                patch++;
              }
              return `v${major}.${minor}.${path}`;
            } catch(e) {
              return 'v1.0.0';
            }
          }
          return getReleaseVersion();
    
    - name: Get New Release Version
      id: new-release-version
      run: |
        echo "${{ steps.release-version.outputs }}"
    
    - name: Publish Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release create "${{ needs.release.outputs.tag }}" --draft=false

## octokit.rest.repos.createRelease({
##  owner,
##  repo,
## tag_name,
##});